server {
    listen 80;
    server_name avs.ma www.avs.ma;
    
    # Test route for debugging
    location /test {
        return 200 "Server is responding correctly";
        add_header Content-Type text/plain;
    }
    
    # Serve static files
    root /var/www/avswebsite/dist;
    index index.html;
    
    # Try files for SPA routing
    try_files $uri $uri/ /index.html;
}

server {
    listen 443 ssl http2;
    server_name avs.ma www.avs.ma;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/avs.ma/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/avs.ma/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Root directory
    root /var/www/avswebsite/dist;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://nkkalmyhxtuisjdjmdew.supabase.co https://cdn.gpteng.co https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://nkkalmyhxtuisjdjmdew.supabase.co wss://nkkalmyhxtuisjdjmdew.supabase.co https://www.google-analytics.com; media-src 'self'; object-src 'none'; frame-src 'none'; base-uri 'self'; form-action 'self'; manifest-src 'self';" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-javascript;

    # Static assets with proper MIME types (let nginx auto-detect)
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # Manifest and Service Worker (critical for PWA behavior)
    location = /manifest.json {
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
        # Remove PWA-specific headers
        add_header X-Content-Type-Options "nosniff" always;
    }

    location = /sw.js {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # API routes
    location /api/ {
        proxy_pass https://nkkalmyhxtuisjdjmdew.supabase.co/rest/v1/;
        proxy_set_header Host nkkalmyhxtuisjdjmdew.supabase.co;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /auth/ {
        proxy_pass https://nkkalmyhxtuisjdjmdew.supabase.co/auth/v1/;
        proxy_set_header Host nkkalmyhxtuisjdjmdew.supabase.co;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Block sensitive files
    location ~ /\.(ht|git|env) {
        deny all;
        return 404;
    }

    # Block common attack patterns
    location ~* (eval\(|base64_decode|gzinflate|boot\.ini|etc/passwd) {
        deny all;
        return 404;
    }

    # Main route - serve index.html for all routes (SPA)
    location / {
        try_files $uri $uri/ /index.html;
        # Let nginx auto-detect content type - no custom Content-Type headers
    }

    # Logs
    access_log /var/log/nginx/avs.ma_access.log;
    error_log /var/log/nginx/avs.ma_error.log;
}